# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
# version: '3'
# services:
#  server:
#    build:
#      context: .
#    ports:
#      - 30033:30033
# version: '3.1'
# services:
#   selenium_app:
#     build: .
#     container_name: selenium_app
#     volumes:
#       - .:/app
#     environment:
#       - DISPLAY=:99
#     ports:
#       - "4444:4444"
#     shm_size: '2gb'
#     networks:
#       - selenium_net
version: '3.2'
services:
  selenium_app:
    build: .
    container_name: selenium_app
    volumes:
      - .:/app
    environment:
      - DISPLAY=:99
    ports:
      - "4444:4444"
    shm_size: '2gb'
    networks:
      - selenium_net
  chrome:
    image: selenium/node-chrome:4.22.0-20240621
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

